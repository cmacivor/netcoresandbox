@page "/register"
@inject IJSRuntime JsRuntime;
@inject RegistrationService RegistrationService;

<h3>Register</h3>
<br>
<div id="divError" style="display:none"  class="alert alert-danger" role="alert">
    @errorMessage

    @if (@modelStateErrors.Values.Any())
    {
        foreach (var error in @modelStateErrors.Values.FirstOrDefault())
        {
            @error;
        }
    }
    
</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            <label for="inputUserName">User Name*</label>
            <input type="text" bind="@userName"  class="form-control" id="inputUserName" placeholder="User Name"/>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            <label for="inputPassword">Password*</label>
            <input type="text" bind="@password"  class="form-control" id="inputPassword" placeholder="Password"/>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            <label for="inputPasswordd">Confirm Password*</label>
            <input type="text" bind="@confirmPassword"  class="form-control" id="inputConfirmPassword" placeholder="Confirm Password"/>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            <label for="ddlUserRole">User Role*</label>
            <select bind="@userRole" name="ddlUserRole">
                <option value=""></option>
                <option value="AdultAdmin">AdultAdmin</option>
                <option value="AdultCaseManager">AdultCaseManager</option>
            </select>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <button class="btn btn-primary" onclick="@RegisterUser" id="btnRegister">Register</button>
    </div>
</div>

@functions {
    private string userName = string.Empty;
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private string userRole = string.Empty;
    private string errorMessage = string.Empty;

    private Dictionary<string, string[]> modelStateErrors = new Dictionary<string, string[]>();

    private async void RegisterUser()
    {
        if (string.IsNullOrEmpty(userName) || string.IsNullOrEmpty(password) || string.IsNullOrEmpty(confirmPassword))
        {
            await JsRuntime.InvokeAsync<object>("Register.OpenError");
            
            errorMessage = " Please enter all fields";
            this.StateHasChanged();

            return;
        }

        if (password != confirmPassword )
        {
            await JsRuntime.InvokeAsync<object>("Register.OpenError");
            
            errorMessage = "Passwords don't matchs";
            this.StateHasChanged();

            return;
        }

        //save the user here
        var user = new Registration {
            userName = userName,
            password = password,
            confirmPassword = confirmPassword,
            UserRole = userRole
        };

       var errors = await RegistrationService.RegisterUser(user);

       if (errors != null && errors.ModelState.Any())
       {       
            modelStateErrors = errors.ModelState;

            await JsRuntime.InvokeAsync<object>("Register.OpenError");

            //get the page in sync with the server- like refreshing a page in a traditional app. This is necessary because without it, the div opens without the populated error message
            //in Blazor, every single thing seems to cause the page to fire again- even making an an API call
            this.StateHasChanged();
       }
       else
       {
            errorMessage = "Registered!";

            await JsRuntime.InvokeAsync<object>("Register.OpenError");

            this.StateHasChanged();
       }
    }
}